#%RAML 0.8
title: JOC API
version: 2.0.0
protocols: [ HTTP, HTTPS ]
#baseUri: http://test.sos-berlin.com:3001/joc/api
#mediaType: application/json

documentation:
  - title: VERSIONS
    content: !include joc/documentation/common/versions.md


schemas:
  - errors: !include joc/schemas/common/errors-schema.json
  - error420: !include joc/schemas/common/error420-schema.json
  - ok: !include joc/schemas/common/ok-schema.json
  - orders: !include joc/schemas/order/orders_v-schema.json
  - jsFilter: !include joc/schemas/common/jobSchedulerId-schema.json
  - jsFilterWithTimeout: !include joc/schemas/jobscheduler/urlParam-schema.json
  - jsFilterWithUrl: !include joc/schemas/jobscheduler/urlParam-schema.json
  - jsRegister: !include joc/schemas/jobscheduler/registerParam-schema.json
  - taskFilter: !include joc/schemas/job/taskFilter-schema.json
  - orderHistoryFilter: !include joc/schemas/order/orderHistoryFilter-schema.json
  - startOrders: !include joc/schemas/order/startOrders-schema.json
  - modifyOrders: !include joc/schemas/order/modifyOrders-schema.json
  - modifyCalendars: !include joc/schemas/calendar/calendarsFilter-schema.json
  - security: !include joc/schemas/user/security-schema.json
  - loginConfiguration: !include joc/schemas/configuration/login-schema.json


resourceTypes:
  - error: !include joc/resourceTypes/common/error.raml
  - postWithPlainResponse: !include joc/resourceTypes/joc/postWithPlainResponse.raml
  - postCalendarWithOkResponse: !include joc/resourceTypes/calendar/postJSONWithOkResponse.raml
  - postDocuWithOkResponse: !include joc/resourceTypes/docu/postJSONWithOkResponse.raml
  - postTimeoutWithOkResponse: !include joc/resourceTypes/common/postTimeoutWithOkResponse.raml
  - postWithOkResponse: !include joc/resourceTypes/jobscheduler/postWithOkResponse.raml
  - postIDWithOkResponse: !include joc/resourceTypes/jobscheduler/postIDWithOkResponse.raml
  - postURLWithPlainResponse: !include joc/resourceTypes/jobscheduler/postWithPlainResponse.raml
  - postStateResponse: !include joc/resourceTypes/jobscheduler/postStateResponse.raml
  - postJSON: !include joc/resourceTypes/common/postJSON.raml
  - postJSONWithOptionalJSId: !include joc/resourceTypes/common/postJSONWithOptionalJSId.raml
  - postJSONWithoutJSId: !include joc/resourceTypes/common/postJSONWithoutJSId.raml
  - postWithoutJSONandJSId: !include joc/resourceTypes/common/postWithoutJSONandJSId.raml
  - postJSONWithOkWithoutJSId: !include joc/resourceTypes/common/postJSONWithOkWithoutJSId.raml
  - postJSON18: !include joc/resourceTypes/common/postJSON18.raml
  - postYADEJSONWithOkResponse: !include joc/resourceTypes/yade/postJSONWithOkResponse.raml
  - postOnlyAccessToken: !include joc/resourceTypes/common/postOnlyAccessToken.raml
  - postOnlyId: !include joc/resourceTypes/common/postOnlyId.raml
  - postJSONWithOkResponse: !include joc/resourceTypes/common/postJSONWithOkResponse.raml
  - postJSONWithoutExample: !include joc/resourceTypes/common/postJSONWithoutExample.raml
  - postForDownload: !include joc/resourceTypes/common/postForDownload.raml
  - postForUpload: !include joc/resourceTypes/common/postForUpload.raml
  - postForImportDeploy: !include joc/resourceTypes/publish/postForImportDeploy.raml
  - postLog: !include joc/resourceTypes/common/postLog.raml
  - postDocu: !include joc/resourceTypes/docu/postDocu.raml
  - getDocu: !include joc/resourceTypes/docu/getDocu.raml
  - login: !include joc/resourceTypes/user/login.raml
  - logout: !include joc/resourceTypes/user/logout.raml
  - postEvent: !include joc/resourceTypes/common/postEvent.raml
  - postTaskLogWithPlainResponse: !include joc/resourceTypes/job/postWithPlainResponse.raml
  - modifyOrder: !include joc/resourceTypes/order/modify.raml
  - startOrder: !include joc/resourceTypes/order/start.raml
  - postOrderLogWithPlainResponse: !include joc/resourceTypes/order/postWithPlainResponse.raml
  - modifyCalendar: !include joc/resourceTypes/calendar/modify.raml
  - loginConfiguration: !include joc/resourceTypes/configuration/login.raml
  - postForDownloadUnsigned: !include joc/resourceTypes/common/postForDownloadUnsigned.raml
  - postForUploadSigned: !include joc/resourceTypes/common/postForUploadSigned.raml
  

traits:
  - jobschedulerController: !include joc/traits/jobschedulerController.raml
  - filteredByPath: !include joc/traits/filteredByPath.raml
  - filteredByOrderId: !include joc/traits/filteredByOrderId.raml
  - filteredByJSType: !include joc/traits/filteredByJSType.raml
  - filteredByTransferFileId: !include joc/traits/filteredByTransferFileId.raml
  - accessToken: !include joc/traits/accessToken.raml
  - filename: !include joc/traits/filename.raml

/audit_log:
  type:
    postJSONWithOptionalJSId:
      description: Responds the audit log
      description1: !include joc/documentation/common/dateFrom.md
      description2: !include joc/documentation/common/dateTo.md
      description3: !include joc/documentation/common/timeZone.md
      description4: !include joc/documentation/common/regex.md
      description5: !include joc/documentation/common/folders.md
      description6: !include joc/documentation/job/filteredByJobs.md
      description7: !include joc/documentation/order/filteredByOrders.md
      description8: !include joc/documentation/calendar/filteredByCalendars.md
      description9: !include joc/documentation/audit/ticketLink.md
      description10: !include joc/documentation/configuration/userParam.md
      description11: !include joc/documentation/common/limit.md
      description12: " "
      description13: " "
      description200: !include joc/documentation/audit/audit.md
      schema: !include joc/schemas/audit/auditLogFilter-schema.json
      schema200: !include joc/schemas/audit/auditLog-schema.json
      example: " "
      example200: " "
  /comments:
    type:
      postOnlyAccessToken:
        description: Response contains pre-defined comments and force_comments_for_audit_log settings from joc.properties file
        description200: " "
        schema200: !include joc/schemas/audit/comments-schema.json
        example200: !include joc/examples/audit/comments-example.json

/calendar:
  description: This is not an API call. Use its children!!
          
  /documentation:
    get:
    type:
      postDocu:
        description: Show documentation
        jsObjectParam: calendar
        jsObject: Calendar
    /assign:
      type:
        postDocuWithOkResponse:
          description: Assigns a Documentation to the Calendar
          description1: !include joc/documentation/docu/docPath.md
          description2: " "
          description3: !include joc/documentation/calendar/calendarRequired.md
          description4: " "
          schema: !include joc/schemas/calendar/calendarDocuFilter-schema.json
          example: TODO
          audit: !include joc/documentation/audit/auditLog.md
    /unassign:
      type:
        postDocuWithOkResponse:
          description: Unassigns a Documentation of the Calendar
          description1: " "
          description2: " "
          description3: !include joc/documentation/calendar/calendarRequired.md
          description4: " "
          schema: !include joc/schemas/calendar/calendarDocuFilter-schema.json
          example: TODO
          audit: !include joc/documentation/audit/auditLog.md
            
/calendars:
  type:
    postJSON:
      description: Sends collection of calendar items
      description1: !include joc/documentation/common/compact.md
      description2: !include joc/documentation/common/regex.md
      description3: !include joc/documentation/common/folders.md
      description4: !include joc/documentation/calendar/calendarType.md
      description5: " "
      description6: !include joc/documentation/calendar/filteredByCalendars.md
      description7: !include joc/documentation/calendar/filteredByCalendarIds.md
      description8: " "
      description9: " "
      description10: " "
      description200: !include joc/documentation/calendar/calendar.md
      schema: !include joc/schemas/calendar/calendarsFilter-schema.json
      schema200: !include joc/schemas/calendar/calendars-schema.json
      example: " "
      example200: " "
      
  /delete:
    type:
      modifyCalendar:
        description: Deletes calendars
        audit: !include joc/documentation/audit/auditLog.md
  
  /export:
    type:
      postForDownload:
        description: Provides Calendars export file as download  (see <a href="../calendars/import.html">./calendars/import</a>)
        description1: !include joc/documentation/calendar/filteredByCalendars.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include joc/schemas/calendar/calendarsFilter-schema.json
        example: " "

  /import:
    type:
      postCalendarWithOkResponse:
#      postForUpload:
        description: Imports Calendar export file (see <a href="../calendars/export.html">./calendars/export</a>)
        description1: !include joc/documentation/calendar/calendarsObj.md
        description2: " "
        description3: " "
        description4: " "
        description200: " "
        schema: !include joc/schemas/calendar/calendarImportFilter-schema.json
        audit: !include joc/documentation/audit/auditLog.md
        example: " "

  /used:
    type:
      postJSON:
        description: Sends compact collection of calendar items with objects which use it
        description1: " "
        description2: !include joc/documentation/common/regex.md
        description3: !include joc/documentation/common/folders.md
        description4: !include joc/documentation/calendar/calendarType.md
        description5: " "
        description6: !include joc/documentation/calendar/filteredByCalendars.md
        description7: !include joc/documentation/calendar/filteredByCalendarIds.md
        description8: " "
        description9: " "
        description10: " "
        description200: !include joc/documentation/calendar/calendar.md
        schema: !include joc/schemas/calendar/calendarsFilter-schema.json
        schema200: !include joc/schemas/calendar/calendars-schema.json
        example: " "
        example200: " "

/cluster:
  /restart:
    type:
      postJSONWithOkWithoutJSId:
        description: Restarts JOC services such as cluster, history, dailyplan 
        description1: !include joc/documentation/cluster/restart.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include joc/schemas/cluster/restart-schema.json
        example: " "
  /switchMember:
    type:
      postJSONWithOkWithoutJSId:
        description: Switches to an inactive JOC cluster memeber 
        description1: !include joc/documentation/cluster/switch.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include joc/schemas/cluster/switch-schema.json
        example: " "
        
/configuration:
  type:
     postJSON:
       description: Responds a configuration from the server (database)
#       description1: !include joc/documentation/configuration/userRequiredParam.md
#       description2: !include joc/documentation/configuration/configurationTypeRequiredParam.md
#       description3: !include joc/documentation/configuration/objectTypeRequiredParam.md
#       description4: !include joc/documentation/configuration/nameParam.md
       description1: " "
       description2: " "
       description3: " "
       description4: " "
       description5: !include joc/documentation/configuration/configurationIdRequiredParam.md
       description6: " "
       description7: " "
       description8: " "
       description9: " "
       description10: " "
       description200: " "
       schema: !include joc/schemas/configuration/configuration-schema.json
       schema200: !include joc/schemas/configuration/configuration200-schema.json
       example: " "
       example200: " "
  /delete:
    type:
       postJSON:
         description: Deletes a configuration on the server (database)
#         description1: !include joc/documentation/configuration/userRequiredParam.md
#         description2: !include joc/documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include joc/documentation/configuration/objectTypeRequiredParam.md
#         description4: !include joc/documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include joc/documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include joc/schemas/configuration/configuration-schema.json
         schema200: !include joc/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /make_private:
    type:
       postJSON:
         description: set a configuration as unshared
#         description1: !include joc/documentation/configuration/userRequiredParam.md
#         description2: !include joc/documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include joc/documentation/configuration/objectTypeRequiredParam.md
#         description4: !include joc/documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include joc/documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include joc/schemas/configuration/configuration-schema.json
         schema200: !include joc/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /login:
    type: loginConfiguration
  
  /save:
    type:
       postJSON:
         description: Stores a configuration on the server (database)
         description1: !include joc/documentation/configuration/userRequiredParam.md
         description2: !include joc/documentation/configuration/configurationTypeRequiredParam.md
         description3: !include joc/documentation/configuration/objectTypeRequiredParam.md
         description4: !include joc/documentation/configuration/nameParam.md
         description5: !include joc/documentation/configuration/sharedParam.md
         description6: !include joc/documentation/configuration/itemParam.md
         description7: !include joc/documentation/configuration/configurationIdRequiredParam.md
         description8: " "
         description9: " "
         description10: " "
         description200: |
             *Response contains the ``id`` of the customization.*<br/>
             It seems to be unnecessary but if a new customization is saved
             (with ``id=0`` in the request) then you get the new id.
         schema: !include joc/schemas/configuration/configuration-schema.json
         schema200: !include joc/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  /share:
    type:
       postJSON:
         description: set a configuration as shared
#         description1: !include joc/documentation/configuration/userRequiredParam.md
#         description2: !include joc/documentation/configuration/configurationTypeRequiredParam.md
#         description3: !include joc/documentation/configuration/objectTypeRequiredParam.md
#         description4: !include joc/documentation/configuration/nameParam.md
         description1: " "
         description2: " "
         description3: " "
         description4: " "
         description5: !include joc/documentation/configuration/configurationIdRequiredParam.md
         description6: " "
         description7: " "
         description8: " "
         description9: " "
         description10: " "
         description200: " "
         schema: !include joc/schemas/configuration/configuration-schema.json
         schema200: !include joc/schemas/configuration/configurationOk-schema.json
         example: " "
         example200: |
           {
             "deliveryDate":"2016-05-05T21:13:35Z",
             "id":4711
           }
  
/configurations:
  type:
     postJSON:
       description: Sends collection of configuration items
       description1: !include joc/documentation/configuration/userParam.md
       description2: !include joc/documentation/configuration/configurationTypeParam.md
       description3: !include joc/documentation/configuration/objectTypeParam.md
       description4: !include joc/documentation/configuration/sharedParam.md
       description5: " "
       description6: " "
       description7: " "
       description8: " "
       description9: " "
       description10: " "
       description200: " "
       schema: !include joc/schemas/configuration/configurationsFilter-schema.json
       schema200: !include joc/schemas/configuration/configurations-schema.json
       example: " "
       example200: " "
  /delete:
    type:
      postJSONWithOkWithoutJSId:
        description: Deletes all configuration items (profile, settings, customizations, ignore lists) of specified accounts 
        description1: !include joc/documentation/configuration/usersParam.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include joc/schemas/configuration/configurationsDeleteFilter-schema.json
        example: " "
#  /shared:
#    type:
#       postOnlyId:
#         description: Sends collection of all shared configuration items
#         description200: " "
#         schema200: !include joc/schemas/configuration/configurations-schema.json
#         example200: " "


/daily_plan:
  description: This is not an API call. Use its children!!
  /orders:
    type:
      postJSON:
        description: Sends a list of JobScheduler orders for a given daily plan 
        description1: !include joc/documentation/dailyplan/dailyPlanDate.md
        description2: !include joc/documentation/dailyplan/orderTemplates.md
        description3: !include joc/documentation/common/folders.md
        description4: !include joc/documentation/order/workflowNotRequired.md
        description5: !include joc/documentation/dailyplan/late.md
        description6: !include joc/documentation/dailyplan/states.md
        description7: !include joc/documentation/dailyplan/submissionHistoryId.md
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include orderManagement/schemas/dailyplan/dailyPlanOrdersFilter-schema.json
        schema200: !include orderManagement/schemas/dailyplan/plannedOrders-schema.json
        example: " "
        example200: " "
    /generate:
      type:
        postJSON:
          description: Generates orders for a given daily plan 
          description1: !include joc/documentation/dailyplan/dailyPlanDate.md
          description2: !include joc/documentation/dailyplan/orderTemplates.md
          description3: !include joc/documentation/dailyplan/overwrite.md
          description4: !include joc/documentation/dailyplan/withSubmit.md
          description5: !include joc/documentation/dailyplan/orderTemplateFolder.md
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include orderManagement/schemas/dailyplan/dailyPlanOrdersFilter-schema.json
          schema200: ok
          example: " "
          example200: " "
  /remove_orders:
     type:
      postJSON:
        description: Delete orders for a given daily plan 
        description1: !include joc/documentation/dailyplan/dailyPlanDateNotRequired.md
        description2: !include joc/documentation/dailyplan/orderTemplates.md
        description3: !include joc/documentation/dailyplan/submissionHistoryId.md
        description4: !include joc/documentation/dailyplan/orderKeys.md
        description5: !include joc/documentation/order/workflowNotRequired.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include orderManagement/schemas/dailyplan/dailyPlanOrdersFilter-schema.json
        schema200: ok
        example: " "
        example200: " "
  /submissions:
     type:
      postJSON:
        description: Sends a list of submissions for daily plans 
        description1: !include joc/documentation/dailyplan/dateFrom.md
        description2: !include joc/documentation/dailyplan/dateTo.md
        description3: !include joc/documentation/dailyplan/dailyplanSubmissionUser.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include orderManagement/schemas/dailyplan/dailyPlanOrdersFilter-schema.json
        schema200: !include orderManagement/schemas/dailyplan/dailyPlanSubmissionHistory-schema.json 
        example: " "
        example200: " "

/documentation:
  description: |
    This is not an API call. Use its children!!
  
  /{jobschedulerId}/{accessToken}/{path}:
    type:
      getDocu:
        description: " "
        #description1: !include joc/documentation/docu/docuId.md
        #description2: " "
        #example: " "
  /used:
    type:
      postJSON:
        description: Sends a list of JobScheduler objects which use the documentation
        description1: !include joc/documentation/docu/docPath.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include joc/schemas/docu/documentationFilter-schema.json
        schema200: !include joc/schemas/docu/usedBy-schema.json
        example: " "
        example200: " "
  /preview:
    get:
    type:
      postDocu:
        description: Preview the documentation
        jsObjectParam: documentation
        jsObject: documentation
        #description1: !include joc/documentation/docu/docPath.md
        #description2: " "
        #schema: !include joc/schemas/docu/documentationShow-schema.json
        #example: " "
  /show:
    get:
    is: [ filteredByJSType ]
    type:
      postDocu:
        description: Sends the documentation of a JobScheduler object
        jsObjectParam: path
        jsObject: JobScheduler object
        #description1: !include joc/documentation/docu/jsObject.md
        #description2: " "
        #schema: !include joc/schemas/docu/documentationShow-schema.json
        #example: " "
  /url:
    post:
    type:
      postJSON:
        description: Sends the URL of a documentation of a JobScheduler object
        description1: !include joc/documentation/docu/jsObject.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include joc/schemas/docu/documentationShow-schema.json
        schema200: !include joc/schemas/docu/url-schema.json
        example: " "
        example200: " "    
#  /store:
#    type:
#      postDocuWithOkResponse:
#        description: Save or Rename a documentation
#        description1: !include joc/documentation/docu/calendarStoreObj.md
#        description2: " "
#        description3: " "
#        description4: " "
#        schema: !include joc/schemas/docu/calendarObjectFilter-schema.json
#        audit: !include joc/documentation/audit/auditLog.md
#        example: " "  
#  /save_as:
#    type:
#      postDocuWithOkResponse:
#        description: SaveAs a documentation
#        description1: !include joc/documentation/docu/calendarObj.md
#        description2: " "
#        description3: " "
#        description4: " "
#        schema: !include joc/schemas/docu/calendarObjectFilter-schema.json
#        audit: !include joc/documentation/audit/auditLog.md
#        example: " "  
#  /rename:
#    type:
#      postDocuWithOkResponse:
#        description: Renames a documentation
#        description1: !include joc/documentation/docu/calendarRequired.md
#        description2: " "
#        description3: !include joc/documentation/docu/calendarNewRequired.md
#        description4: " "
#        schema: !include joc/schemas/docu/calendarRenameFilter-schema.json
#        audit: !include joc/documentation/audit/auditLog.md
#        example: " "

/documentations:
  type:
    postJSON:
      description: Sends collection of documentations
      description1: !include joc/documentation/docu/filteredByPaths.md
      description2: " "
      description3: !include joc/documentation/common/regex.md
      description4: !include joc/documentation/common/folders.md
      description5: !include joc/documentation/docu/docuTypes.md
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include joc/documentation/docu/docu.md
      schema: !include joc/schemas/docu/documentationsFilter-schema.json
      schema200: !include joc/schemas/docu/documentations-schema.json
      example: " "
      example200: " "
  /export:
    get:
    type:
      postForDownload:
        description: Provides export file (zip) as download of documentations
        description1: !include joc/documentation/docu/filteredByPaths.md
        description2: !include joc/documentation/common/folders.md
        description3: " "
        description4: " "
        description5: " "
        infoapi: ./documentation/export
        schema: !include joc/schemas/docu/documentationsFilter-schema.json
        example: " "
    /info:
      type:
        postJSON:
          description: Temp. Filename for Export 
          description1: !include joc/documentation/docu/filteredByPaths.md
          description2: !include joc/documentation/common/folders.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: !include joc/documentation/docu/exportInfo.md
          schema: !include joc/schemas/docu/documentationsFilter-schema.json
          schema200: !include joc/schemas/docu/exportInfo-schema.json
          example: " "
          example200: " "
  /import:
    type:
      postForUpload:
        description: Import Documentations
  /delete:
    type:
      postJSON:
        description: Deletes a list of Documentations
        description1: !include joc/documentation/docu/filteredByPaths.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include joc/schemas/docu/documentationsFilter-schema.json
        schema200: ok
        example: " "
        example200: " "

/events:
  type:
    postEvent:
      description200: TODO
      schema: !include joc/schemas/event/register-schema.json
      schema200: !include joc/schemas/event/events-schema.json
      example: TODO
      example200: TODO

/inventory:
  description: This is not an API call. Use its children!!
  
  /calendar/dates:
    type:
      postJSONWithoutJSId:
        description: Sends dates of a calendar
        description1: !include joc/documentation/calendar/calendarIdPath.md
        description2: " "
        description3: !include joc/documentation/calendar/dateFrom.md
        description4: !include joc/documentation/calendar/dateTo.md
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include joc/documentation/inventory/configuration-response.md
        schema: !include joc/schemas/calendar/calendarDatesFilter-schema.json
        example: !include joc/examples/calendar/calendarDates-example.json
        schema200: !include joc/schemas/calendar/dates-schema.json
        example200: TODO
        
  /read/configuration:
    type:
      postJSONWithoutJSId:
        description: Read configuration of an inventory object
        description1: !include joc/documentation/inventory/id-required.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include joc/documentation/inventory/configuration-response.md
        schema: !include joc/schemas/inventory/read/configuration/request-filter-schema.json
        example: TODO
        schema200: !include joc/schemas/inventory/configurationObject-schema.json
        example200: TODO
  
  /read/folder:
    type:
      postJSONWithoutJSId:
        description: Read folder content
        description1: !include joc/documentation/inventory/path.md
        description2: !include joc/documentation/inventory/objectTypes.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include joc/schemas/inventory/common/request-folder-schema.json
        example: TODO
        schema200: !include joc/schemas/inventory/common/response-folder-schema.json
        example200: TODO
              
  /rename:
    type:
      postJSONWithOkWithoutJSId:
        description: Renames inventory object
        description1: !include joc/documentation/inventory/id-required.md
        description2: !include joc/documentation/inventory/name.md
        description3: " "
        description4: " "
        description5: " "
        schema: !include joc/schemas/inventory/rename/request-filter-schema.json
        example: TODO
        
  /store:
    type:
      postJSONWithoutJSId:
        description: Stores inventory object
        description1: !include joc/documentation/inventory/id.md
        description2: !include joc/documentation/inventory/path.md
        description3: !include joc/documentation/inventory/objectType-required.md
        description4: !include joc/documentation/inventory/valid.md
        description5: !include joc/documentation/inventory/configuration-request.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: !include joc/documentation/inventory/store-response.md
        schema: !include joc/schemas/inventory/configurationObject-schema.json
        example: TODO
        schema200: !include joc/schemas/inventory/configurationObject-schema.json
        example200: !include joc/examples/inventory/store-response-example.json

/job:
  /documentation:
    get:
    type:
      postDocu:
        description: Show documentation
        jsObjectParam: job
        jsObject: Job
    /assign:
      type:
        postDocuWithOkResponse:
          description: Assigns a Documentation to the Job
          description1: !include joc/documentation/docu/docPath.md
          description2: " "
          description3: !include joc/documentation/job/jobRequired.md
          description4: " "
          schema: !include joc/schemas/job/jobDocuFilter-schema.json
          example: TODO
          audit: !include joc/documentation/audit/auditLog.md
    /unassign:
      type:
        postDocuWithOkResponse:
          description: Unassigns a Documentation of the Job
          description1: " "
          description2: " "
          description3: !include joc/documentation/job/jobRequired.md
          description4: " "
          schema: !include joc/schemas/job/jobDocuFilter-schema.json
          example: TODO
          audit: !include joc/documentation/audit/auditLog.md

#TODO
#/jobclass:
#  /configuration:
#    type:
#      postJSON:
#        description: !include joc/documentation/common/configuration.md
#        description1: !include joc/documentation/processClass/processClassRequired.md
#        description2: !include joc/documentation/common/configurationFileMimeParam.md
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: Returns the process class configuration in XML or HTML format
#        schema: !include joc/schemas/processClass/processClassConfigurationFilter-schema.json
#        schema200: !include joc/schemas/common/configuration-schema.json
#        example: TODO
#        example200: !include joc/examples/processClass/configuration-example.json
#  /documentation:
#    get:
#    type:
#      postDocu:
#        description: Show documentation
#        jsObjectParam: processClass
#        jsObject: ProcessClass
#    /assign:
#      type:
#        postDocuWithOkResponse:
#          description: Assigns a Documentation to the Process Class
#          description1: !include joc/documentation/docu/docPath.md
#          description2: " "
#          description3: !include joc/documentation/processClass/processClassRequired.md
#          description4: " "
#          schema: !include joc/schemas/processClass/processClassDocuFilter-schema.json
#          example: TODO
#          audit: !include joc/documentation/audit/auditLog.md
#    /unassign:
#      type:
#        postDocuWithOkResponse:
#          description: Unassigns a Documentation of the Process Class
#          description1: " "
#          description2: " "
#          description3: !include joc/documentation/processClass/processClassRequired.md
#          description4: " "
#          schema: !include joc/schemas/processClass/processClassDocuFilter-schema.json
#          example: TODO
#          audit: !include joc/documentation/audit/auditLog.md
#/jobclasses:
#  type:
#    postJSON:
#      description: process classes (volatile part)
#      description1: !include joc/documentation/processClass/filteredByProcessClasses.md
#      description2: !include joc/documentation/common/regex.md
#      description3: " "
#      description4: " "
#      description5: !include joc/documentation/common/folders.md
#      description6: !include joc/documentation/processClass/filteredByHasAgent.md
#      description7: " "
#      description8: " "
#      description9: " "
#      description10: " "
#      description200: !include joc/documentation/processClass/processClass_v.md
#      schema: !include joc/schemas/processClass/processClassesFilter-schema.json
#      schema200: !include joc/schemas/processClass/processClasses_v-schema.json
#      example: TODO
#      example200: !include joc/examples/processClass/processClasses_v-example.json
#  /p:
#    type:
#      postJSON:
#        description: process classes (permanent part)
#        description1: !include joc/documentation/processClass/filteredByProcessClasses.md
#        description2: !include joc/documentation/common/regex.md
#        description3: " "
#        description4: " "
#        description5: !include joc/documentation/common/folders.md
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include joc/documentation/processClass/processClass_p.md
#        schema: !include joc/schemas/processClass/processClassesFilter-schema.json
#        schema200: !include joc/schemas/processClass/processClasses_p-schema.json
#        example: TODO
#        example200: !include joc/examples/processClass/processClasses_p-example.json

          
/jobs:
  /overview/snapshot:
    type:
      postOnlyId:
        description: |
            Summary with number of<h5>
            * pending jobs
            * running tasks
            </h5>
        description200: " "
        schema200: !include joc/schemas/job/snapshot-schema.json
        example200: !include joc/examples/job/snapshot-example.json
  /overview/summary:
    type:
      postJSON:
        description: |
            Summary with number of<h5>
            * successful tasks
            * failed tasks

            filtered by <code>dateFrom</code> parameter until now
            </h5>
        description1: !include joc/documentation/common/dateFrom.md
        description2: !include joc/documentation/common/dateTo.md
        description3: !include joc/documentation/common/timeZone.md
        description4: " "
        description5: !include joc/documentation/job/filteredByJobs.md
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include joc/schemas/job/summary-schema.json
        schema: !include joc/schemas/job/jobsFilter-schema.json
        example: |
            {
              "dateFrom": "1d"
            }
        example200: !include joc/examples/job/summary-example.json
        
/jobscheduler:
  type:
    postStateResponse:
      description: JobScheduler information such as its status
      urlparam: !include joc/documentation/jobscheduler/urlParam.md
      description200: !include joc/documentation/jobscheduler/master.md
      schema200: !include joc/schemas/jobscheduler/jobscheduler200_v-schema.json
      example200: " "
  /abort:
    type:
      postWithOkResponse:
        description: Abort JobScheduler Controller
        urlparam: !include joc/documentation/jobscheduler/urlParamClusterRequired.md
        failover: !include joc/documentation/jobscheduler/failover.md
        audit: !include joc/documentation/audit/auditLog.md
  /abort_and_restart:
    type:
      postWithOkResponse:
        description: Abort and restart JobScheduler Controller
        urlparam: !include joc/documentation/jobscheduler/urlParamClusterRequired.md
        failover: !include joc/documentation/jobscheduler/failover.md
        audit: !include joc/documentation/audit/auditLog.md
  
#TODO
#  /agents:
#    type:
#      postJSON:
#        description: Collection of JobScheduler Agents with volatile information.
#        description1: !include joc/documentation/jobscheduler/agentsParam.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        schema: !include joc/schemas/jobscheduler/agentFilter-schema.json
#        description200: !include joc/documentation/jobscheduler/agents_v.md
#        schema200: !include joc/schemas/jobscheduler/agents_v-schema.json
#        example: !include joc/examples/jobscheduler/jobschedulerParam-example.json
#        example200: !include joc/examples/jobscheduler/agents_v-example.json
#    /p:
#      type:
#        postJSON:
#          description: Collection of JobScheduler Agents with general permanent information
#          description1: !include joc/documentation/jobscheduler/agentsParam.md
#          description2: " "
#          description3: " "
#          description4: " "
#          description5: " "
#          description6: " "
#          description7: " "
#          description8: " "
#          description9: " "
#          description10: " "
#          schema: !include joc/schemas/jobscheduler/agentFilter-schema.json
#          description200: !include joc/documentation/jobscheduler/agents_p.md
#          schema200: !include joc/schemas/jobscheduler/agents_p-schema.json
#          example: !include joc/examples/jobscheduler/jobschedulerParam-example.json
#          example200: !include joc/examples/jobscheduler/agents_p-example.json
#  /agent_clusters:
#    type:
#      postJSON:
#        description: Collection of JobScheduler Agent Clusters with volatile information
#        description1: !include joc/documentation/common/compact.md
#        description2: !include joc/documentation/jobscheduler/agentClustersParam.md
#        description3: !include joc/documentation/jobscheduler/state.md
#        description4: !include joc/documentation/jobscheduler/regex.md
#        description5: !include joc/documentation/common/folders.md
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include joc/documentation/jobscheduler/agentCluster_v.md
#        schema: !include joc/schemas/jobscheduler/agentClusterFilter-schema.json
#        schema200: !include joc/schemas/jobscheduler/agentClusters-schema.json
#        example: !include joc/examples/jobscheduler/filteredByAgentCluster-example.json
#        example200: !include joc/examples/jobscheduler/agentClusters_v-example.json
#
  /cleanup:
    type:
      postWithOkResponse:
        description: Clean up inventory tables from the reporting database
        urlparam: " "
        failover: " "
        audit: !include joc/documentation/audit/auditLog.md
  
  /cluster/switchover:
    type:
      postWithOkResponse:
        description: Switch over JobScheduler Cluster
        urlparam: " "
        failover: " "
        audit: !include joc/documentation/audit/auditLog.md

  /components:
    type:
      postOnlyId:
        description: Returns JobScheduler Components
        description200: " "
        schema200: !include joc/schemas/jobscheduler/components-schema.json
        example200: " "
  
  /controllers:
    type:
      postOnlyId:
        description: Returns collection of all JobScheduler Controllers
        description200: !include joc/documentation/jobscheduler/master.md
        schema200: !include joc/schemas/jobscheduler/masters-schema.json
        example200: " "
    /p:
      type:
        postOnlyId:
          description: Returns collection of all JobScheduler Controllers (permanent information)
          description200: !include joc/documentation/jobscheduler/jobscheduler_p.md
          schema200: !include joc/schemas/jobscheduler/masters-schema.json
          example200: " "
  /ids:
    type: error
    post:
      description: |
        <h2>Returns collection of all available JobScheduler Ids</h2>
      responses:
        200:
          description: |
            * The collection of all available JobScheduler Ids can be used for a
            selectbox in which the user can change the Id.
            * The Id which is specified in the selected field will be used for
            all following requests
          body:
            application/json:
              schema: !include joc/schemas/jobscheduler/jobschedulerIds-schema.json
              example: !include joc/examples/jobscheduler/ids-example.json
  /log:
    type:
      postURLWithPlainResponse:
        description: Provides JobScheduler log (master.log) as download in gzip format
        description200: Snapshot of current master.log for download in gzip format
  
  /p:
    type:
      postStateResponse:
        description: General permanent JobScheduler information
        urlparam: !include joc/documentation/jobscheduler/urlParam.md
        description200: !include joc/documentation/jobscheduler/jobscheduler_p.md
        schema200: !include joc/schemas/jobscheduler/jobscheduler200_v-schema.json
        example200: " "
  
  /register:
    type: 
      postIDWithOkResponse:
        description: Register a new Master or update an existing master
        audit: !include joc/documentation/audit/auditLog.md

  /restart:
    type:
      postWithOkResponse:
        description: Restart JobScheduler Controller
        urlparam: !include joc/documentation/jobscheduler/urlParamClusterRequired.md
        failover: !include joc/documentation/jobscheduler/failover.md
        audit: !include joc/documentation/audit/auditLog.md
  
  /switch:
    type:
      postOnlyId:
        description: Send a JobScheduler Id when the user switches the JobScheduler
        description200: " "
        example200: !include joc/examples/user/permissions-example.json
        schema200: !include joc/schemas/user/permissions-schema.json
  
  /terminate:
    type:
      postWithOkResponse:
        description: Terminate JobScheduler Controller
        urlparam: !include joc/documentation/jobscheduler/urlParamClusterRequired.md
        failover: !include joc/documentation/jobscheduler/failover.md
        audit: !include joc/documentation/audit/auditLog.md
  
  /test:
    type:
      postStateResponse:
        description: Test JobScheduler Controller connection
        urlparam: !include joc/documentation/jobscheduler/urlParamRequired.md
        description200: !include joc/documentation/jobscheduler/jobschedulerTest.md
        schema200: !include joc/schemas/jobscheduler/jobscheduler200_v-schema.json
        example200: !include joc/examples/jobscheduler/test-example.json

#/lock:
#  description: |
#    This is not an API call. Use its children!!
#  /configuration:
#    type:
#      postJSON:
#        description: !include joc/documentation/common/configuration.md
#        description1: include documentation/lock/lockRequired.md
#        description2: !include joc/documentation/common/configurationFileMimeParam.md
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: Returns the lock configuration in XML or HTML format
#        schema: !include joc/schemas/lock/lockConfigurationFilter-schema.json
#        schema200: !include joc/schemas/common/configuration-schema.json
#        example: !include joc/examples/lock/filteredLock-example.json
#        example200: !include joc/examples/lock/configuration-example.json
#  /documentation:
#    get:
#    type:
#      postDocu:
#        description: Show documentation
#        jsObjectParam: lock
#        jsObject: Lock
#    /assign:
#      type:
#        postDocuWithOkResponse:
#          description: Assigns a Documentation to the Lock
#          description1: !include joc/documentation/docu/docPath.md
#          description2: " "
#          description3: !include joc/documentation/lock/lockRequired.md
#          description4: " "
#          schema: !include joc/schemas/lock/lockDocuFilter-schema.json
#          example: TODO
#          audit: !include joc/documentation/audit/auditLog.md
#    /unassign:
#      type:
#        postDocuWithOkResponse:
#          description: Unassigns a Documentation of the Lock
#          description1: " "
#          description2: " "
#          description3: !include joc/documentation/lock/lockRequired.md
#          description4: " "
#          schema: !include joc/schemas/lock/lockDocuFilter-schema.json
#          example: TODO
#          audit: !include joc/documentation/audit/auditLog.md
#/locks:
#  type:
#    postJSON:
#      description: Collection of lock objects
#      description1: !include joc/documentation/lock/filteredByLocks.md
#      description2: !include joc/documentation/common/regex.md
#      description3: !include joc/documentation/common/folders.md
#      description4: " "
#      description5: " "
#      description6: " "
#      description7: " "
#      description8: " "
#      description9: " "
#      description10: " "
#      description200: TODO
#      schema: !include joc/schemas/lock/locksFilter-schema.json
#      schema200: !include joc/schemas/lock/locks_v-schema.json
#      example: TODO
#      example200: !include joc/examples/lock/locks_v-example.json
#  /p:
#    type:
#      postJSON:
#        description: Collection of lock objects
#        description1: !include joc/documentation/lock/filteredByLocks.md
#        description2: !include joc/documentation/common/regex.md
#        description3: !include joc/documentation/common/folders.md
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include joc/documentation/lock/locks_p.md
#        schema: !include joc/schemas/lock/locksFilter-schema.json
#        schema200: !include joc/schemas/lock/locks_p-schema.json
#        example: TODO
#        example200: !include joc/examples/lock/locks_p-example.json

/log:
  type:
    postWithPlainResponse:
      description: Provides JOC Cockpit log ([date].stderrout.log) as download
      description1: !include joc/documentation/joc/filename.md
      description200: Content of JOC Cockpit log ([date].stderrout.log) for download
      schema: !include joc/schemas/joc/filename-schema.json

/logs:
  type: error
  post:
    description: <h2>Returns a list of JOC Cockpit logs ([date].stderrout.log)</h2>
    responses:
      200:
        description: " "
        body:
          application/json:
            schema: !include joc/schemas/joc/filenames-schema.json

/order:
  type:
    postJSON:
      description: order (volatile part) - <b>IN PROGRESS</b>
      description1: " "
      description2: !include joc/documentation/order/orderIdRequired.md
      description3: !include joc/documentation/common/compact.md
      description4: !include joc/documentation/common/suppressObjectNotExistException.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include joc/documentation/order/orders_v.md
      schema: !include joc/schemas/order/orderFilter-schema.json
      schema200: !include joc/schemas/order/order_v-schema.json
      example: !include joc/examples/order/filteredOrder-example.json
      example200: TODO
#  /p:
#    type:
#      postJSON:
#        description: order (permanent part)
#        description1: !include joc/documentation/order/workflow.md
#        description2: !include joc/documentation/order/orderIdRequired.md
#        description3: !include joc/documentation/common/compact.md
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include joc/documentation/order/orders_p.md
#        schema: !include joc/schemas/order/orderFilter-schema.json
#        schema200: !include joc/schemas/order/order200_p-schema.json
#        example: !include joc/examples/order/filteredOrder-example.json
#        example200: !include joc/examples/order/order_p-example.json
  /history:
    type:
      postJSON:
        description: Order step history of the specified history id from _reporting_
        description1: " "
        description2: " "
        description3: !include joc/documentation/order/historyId.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: TODO
        schema: orderHistoryFilter
        schema200: !include joc/schemas/job/history-schema.json
        example: " "
        example200: " "
  /log:
    type:
      postJSON:
        description: Order log
        description1: !include joc/documentation/order/historyId.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: array of logEvents
        schema: orderHistoryFilter
        schema200: !include joc/schemas/order/orderLog-schema.json
        example: " "
        example200: TODO
    /running:
      type:
        postJSON:
          description: Order running log
          description1: " "
          description2: !include joc/documentation/order/historyId.md
          description3: !include joc/documentation/order/runningLog.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          schema200: !include joc/schemas/order/orderLog-schema.json
          schema: !include joc/schemas/order/orderRunningLogFilter-schema.json
          example: TODO
          example200: " "
    /download:
      type:
        postOrderLogWithPlainResponse:
          description: Provides order log as download
#  /configuration:
#    type:
#      postJSON:
#        description: !include joc/documentation/common/configuration.md
#        description1: !include joc/documentation/order/workflow.md
#        description2: !include joc/documentation/order/orderIdRequired.md
#        description3: !include joc/documentation/common/configurationFileMimeParam.md
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: Returns the order configuration in XML or HTML format
#        schema: !include joc/schemas/order/orderConfigurationFilter-schema.json
#        schema200: !include joc/schemas/common/configuration-schema.json
#        example: !include joc/examples/order/filteredOrder-example.json
#        example200: !include joc/examples/order/configuration-example.json
#  /run_time:
#    type:
#      postJSON:
#        description: run time as XML string embedded in JSON
#        description1: !include joc/documentation/order/workflow.md
#        description2: !include joc/documentation/order/orderIdRequired.md
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: Returns the run time as XML string in the JSON content field
#        schema: !include joc/schemas/order/orderFilter-schema.json
#        schema200: !include joc/schemas/common/runtime200-schema.json
#        example: !include joc/examples/order/filteredOrder-example.json
#        example200: !include joc/examples/common/runtime-example.json
#  /calendars:
#    type:
#      postJSON:
#        description: send assigned calendars
#        description1: !include joc/documentation/order/workflow.md
#        description2: !include joc/documentation/order/orderIdRequired.md
#        description3: !include joc/documentation/common/compact.md
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include joc/documentation/calendar/calendar.md
#        schema: !include joc/schemas/order/orderFilter-schema.json
#        schema200: !include joc/schemas/calendar/calendars-schema.json
#        example: !include joc/examples/order/filteredOrder-example.json
#        example200: TODO
  /documentation:
    get:
    is: [ filteredByOrderId ]
    type:
      postDocu:
        description: Show documentation
        jsObjectParam: workflow
        jsObject: workflow
    /assign:
      type:
        postDocuWithOkResponse:
          description: Assigns a Documentation to the Order
          description1: !include joc/documentation/docu/docPath.md
          description2: !include joc/documentation/order/workflow.md
          description3: !include joc/documentation/order/orderIdRequired.md
          description4: " "
          schema: !include joc/schemas/order/orderDocuFilter-schema.json
          example: TODO
          audit: !include joc/documentation/audit/auditLog.md
    /unassign:
      type:
        postDocuWithOkResponse:
          description: Unassigns a Documentation of the Order
          description1: " "
          description2: !include joc/documentation/order/workflow.md
          description3: !include joc/documentation/order/orderIdRequired.md
          description4: " "
          schema: !include joc/schemas/order/orderDocuFilter-schema.json
          example: TODO
          audit: !include joc/documentation/audit/auditLog.md
       
/orders:
  type:
    postJSON:
      description: Returns a collection of orders (volatile part) filtered by workflow or order state - <b>IN PROGRESS</b>
      description1: !include joc/documentation/order/orderIds.md
      description2: !include joc/documentation/workflow/filteredByWorkflows.md
      description3: !include joc/documentation/common/folders.md
      description4: !include joc/documentation/common/compact.md
      description5: !include joc/documentation/common/regex.md
      description6: !include joc/documentation/order/state.md
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: !include joc/documentation/order/orders_v.md
      schema: !include joc/schemas/order/ordersFilterV-schema.json
      schema200: !include joc/schemas/order/orders_v-schema.json
      example: TODO
      example200: TODO
  /add:
    type:
      startOrder:
        audit: !include joc/documentation/audit/auditLog.md
  /cancel:
    type:
      modifyOrder:
        description: Cancel orders - <b>IN PROGRESS</b>
        audit: !include joc/documentation/audit/auditLog.md
  /history:
    type:
      postJSONWithOptionalJSId:
        description: Order history from _reporting_
        description1: !include joc/documentation/order/filteredByOrders.md
        description2: !include joc/documentation/order/excludeOrders.md
        description3: !include joc/documentation/common/dateFrom.md
        description4: !include joc/documentation/common/dateTo.md
        description5: !include joc/documentation/common/timeZone.md
        description6: !include joc/documentation/common/regex.md
        description7: !include joc/documentation/common/folders.md
        description8: !include joc/documentation/common/limit.md
        description9: !include joc/documentation/common/historyStates.md
        description10: !include joc/documentation/order/historyIds.md
        description11: " "
        description12: " "
        description13: " "
        description200: TODO
        schema: !include joc/schemas/order/ordersFilter-schema.json
        schema200: !include joc/schemas/order/history-schema.json
        example: !include joc/examples/order/filteredOrders-example.json
        example200: TODO
  /overview/snapshot:
      type:
        postJSON:
          description: |
            Summary with number of<h5>
            * pending orders
            * running orders
            * suspended orders
            * failed orders
            * waiting orders
            * blocked orders
            </h5>
          description1: " "
          description2: !include joc/documentation/workflow/filteredByWorkflows.md
          description3: " "
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema: !include joc/schemas/workflow/workflowsFilter-schema.json
          example: TODO
          schema200: !include joc/schemas/order/snapshot-schema.json
          example200: !include joc/examples/order/snapshot-example.json
  /overview/summary:
      type:
        postJSON:
          description: |
            Summary with number of<h5>
            * successful orders
            * failed orders

            filtered by <code>dateFrom</code> parameter until now
            </h5>
          description1: !include joc/documentation/common/dateFrom.md
          description2: !include joc/documentation/common/dateTo.md
          description3: !include joc/documentation/common/timeZone.md
          description4: " "
          description5: " "
          description6: " "
          description7: " "
          description8: " "
          description9: " "
          description10: " "
          description200: " "
          schema200: !include joc/schemas/order/summary-schema.json
          schema: !include joc/schemas/order/ordersFilter-schema.json
          example: |
            {
              "dateFrom": "1d"
            }
          example200: !include joc/examples/order/summary-example.json
  /resume:
    type:
      modifyOrder:
        description: Resume orders - <b>IN PROGRESS</b>
        audit: !include joc/documentation/audit/auditLog.md
  /suspend:
    type:
      modifyOrder:
        description: Suspend orders - <b>IN PROGRESS</b>
        audit: !include joc/documentation/audit/auditLog.md
  /variables:
    type:
      postJSON:
        description: Read the variables for a given order 
        description1: " "
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include joc/schemas/order/orderFilter-schema.json
        schema200: !include orderManagement/schemas/orders/orderVariables-schema.json
        example: " "
        example200: " "
        
/order_templates:
  description: This is not an API call. Use its children!!
  /list:
    type:
      postJSON:
        description: Sends a list of order templates for a given controller 
        description1: " "
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema: !include joc/schemas/common/controllerId-schema.json
        schema200: !include orderManagement/schemas/orders/orderTemplate-schema.json
        example: " "
        example200: " "
/properties:
  type:
    postOnlyAccessToken:
      description: |
        Response contains some settings from joc.properties file such as 
        * pre-defined audit log comments
        * flag to force audit log comments
        * show/hide views 
      description200: " "
      schema200: !include joc/schemas/joc/properties-schema.json
      example200: !include joc/examples/joc/properties-example.json

/publish:
  description: This is not an API call. Use child urls instead!

  /export:
    type:
      postForDownloadUnsigned:
        description: provides archive file (zip, tar.gz, gz) to download unsigned JSON files of 
        description1: !include joc/documentation/publish/exportFilterById.md
        schema: !include joc/schemas/publish/exportFilter-schema.json
        example: !include joc/examples/publish/publishExport-example.json
  /deploy:
    type:
      postJSONWithOkWithoutJSId:
        description: Deploys a signed JS Object to the current JobScheduler Controller
        description1: !include joc/documentation/publish/schedulersFilteredById.md
        description2: !include joc/documentation/publish/updateFilteredById.md
        description3: !include joc/documentation/publish/deleteFilteredById.md
        description4: " "
        description5: " "
        schema: !include joc/schemas/publish/deploy-schema.json
        example: !include joc/examples/publish/deploy-example.json
  /generate_key:
    type:
      postJSONWithoutJSId:
        description: generates a new private PGP key (ASCII format only)
        description1: !include joc/documentation/publish/generateKeyValidUntil.md
        description2: !include joc/documentation/publish/generateKeyUsePGP.md
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include joc/schemas/pgp/jocKeyPair-schema.json
        example200: !include joc/examples/publish/showKey-example.json
        schema: !include joc/schemas/publish/generateKey-schema.json
        example: !include joc/examples/publish/generateKey-example.json
  /import:
    type:
      postForUploadSigned:
        description: uploads archive file (zip, tar.gz, gz) with signed and unsigned JSON files of JobScheduler Objects  
        schema: !include joc/schemas/publish/importFilter-schema.json
        example: !include joc/examples/publish/publishImport-example.json
  /import_deploy:
    type:
      postForImportDeploy:
        description: uploads archive file (zip, tar.gz, gz) with signed and unsigned JSON files of JobScheduler Objects and deploys the objects to the given controllers
        schema: !include joc/schemas/publish/importDeployFilter-schema.json
        example: !include joc/examples/publish/publishImportDeploy-example.json
  /import_key:
    type:
      postForUploadSigned:
        description: uploads a Private Key, a Public Key or a Certificate ASCII file (*.asc, *.crt)  
        schema: !include joc/schemas/publish/importFilter-schema.json
        example: " "
  /set_key:
    type:
      postJSONWithOkWithoutJSId:
        description: sets a new Public Key, a Certificate or Private key (ASCII format only)
        description1: !include joc/documentation/publish/setPrivateKey.md
        description2: !include joc/documentation/publish/setPublicKey.md
        description3: !include joc/documentation/publish/setCertificate.md
        description4: !include joc/documentation/publish/setKeyAlgorythm.md
        description5: " "
        schema: !include joc/schemas/publish/setKey-schema.json
        example: !include joc/examples/publish/setKey-example.json
  /set_version:
    type:
      postJSONWithOkWithoutJSId:
        description: sets a new version to an array of JS Objects
        description1: !include joc/documentation/publish/setVersionFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include joc/schemas/publish/setVersion-schema.json
        example: !include joc/examples/publish/setVersion-example.json
  /set_versions:
    type:
      postJSONWithOkWithoutJSId:
        description: sets a new version per item to an array of JS Objects
        description1: !include joc/documentation/publish/setVersionsFilter.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        schema: !include joc/schemas/publish/setVersions-schema.json
        example: !include joc/examples/publish/setVersions-example.json
  /show_key:
    type:
      postWithoutJSONandJSId:
        description: shows the stored public PGP key or the public and private PGP key (ASCII format only)
        description1: " "
        description2: " "
        schema: !include joc/examples/publish/emptyBody-example.json
        schema200: !include joc/schemas/pgp/jocKeyPair-schema.json
        example: !include joc/examples/publish/emptyBody-example.json
        example200: !include joc/examples/publish/showKey-example.json

/security:
  description: This is not an API call. Use child urls instead!
  
  /joc_cockpit_permissions:
    type:
      postOnlyId:
        description: Returns list of user's permissions
        description200: " "
        example200: !include joc/examples/user/permissions-example.json
        schema200: !include joc/schemas/user/permissions-schema.json
  
  /login:
    type: login
    
  /logout:
    type: logout 

/security_configuration:
  description: This is not an API call. Use child urls instead!
  
  /read:
    type: error
    post:
      description: <h2>Reads security configuration from shiro.ini</h2>
      responses:
        200:
          body:
            application/json:
              schema: !include joc/schemas/security/security-configuration-schema.json
        420:
          body:
            application/json:
        440:
          body:
            application/json:
      
  /write:
    type:
      postJSONWithoutJSId:
        description: Writes security configuration into shiro.ini
        description1: !include joc/documentation/security/main.md
        description2: !include joc/documentation/security/users.md
        description3: !include joc/documentation/security/roles.md
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        description200: " "
        schema200: !include joc/schemas/security/security-configuration-schema.json
        example200: " "
        schema: !include joc/schemas/security/security-configuration-schema.json
        example: " "

/task/log:
  type:
    postLog:
      description1: !include joc/documentation/job/task.md
      description2: " "
      description3: " "
      schema: taskFilter
      example: TODO
      example200: !include joc/examples/job/taskLog-example.txt
  /download:
    type:
      postTaskLogWithPlainResponse:
        description: Provides task log as download
  /running:
    type:
      postJSON:
        description: Task running log
        description1: !include joc/documentation/job/runningTasks.md
        description2: " "
        description3: " "
        description4: " "
        description5: " "
        description6: " "
        description7: " "
        description8: " "
        description9: " "
        description10: " "
        schema200: !include joc/schemas/job/runningTaskLogs-schema.json
        schema: !include joc/schemas/job/runningTaskLogsFilter-schema.json
        example: TODO
        example200: " "

/tasks/history:
  type:
    postJSONWithOptionalJSId:
      description: Task history from _reporting_ (permanent)
      description1: !include joc/documentation/job/filteredByJobs.md
      description2: !include joc/documentation/job/excludeJobs.md
      description3: !include joc/documentation/common/dateFrom.md
      description4: !include joc/documentation/common/dateTo.md
      description5: !include joc/documentation/common/timeZone.md
      description6: !include joc/documentation/common/regex.md
      description7: !include joc/documentation/common/folders.md
      description8: !include joc/documentation/common/limit.md
      description9: !include joc/documentation/common/historyStates.md
      description10: !include joc/documentation/job/criticalities.md
      description11: !include joc/documentation/job/taskIds.md
      description12: !include joc/documentation/job/taskIdOfOrder.md
      description13: !include joc/documentation/job/filteredByOrders.md
      description200: TODO
      schema: !include joc/schemas/job/jobsFilter-schema.json
      schema200: !include joc/schemas/job/history-schema.json
      example: TODO
      example200: !include joc/examples/job/taskHistory-example.json

/touch:
  type: error
  post:
    description: |
      <h2>Refesh the session timeout</h2>
    responses:
      200:
        description: |
          **Confirm 'Touch' successfully**
        body:
          application/json:
            example: |
              {
                "deliveryDate":"2016-05-05T21:13:35Z",
                "ok":true
              }
            schema: ok

/tree:
  type:
    postJSON:
      description: Collections of specified object with folders information in a tree structure
      description1: " "
      description2: " "
      description3: " "
      description4: " "
      description5: " "
      description6: !include joc/documentation/common/folders.md
      description7: !include joc/documentation/common/typesParam.md
      description8: " "
      description9: " "
      description10: " "
      description200: !include joc/documentation/tree/tree.md
      schema: !include joc/schemas/tree/treeFilter-schema.json
      schema200: !include joc/schemas/tree/treeView-schema.json
      example: !include joc/examples/tree/filteredtree-example.json
      example200: !include joc/examples/tree/tree-example.json

/workflow:
  type:
    postJSON:
      description: Returns a workflow - <b>IN PROGRESS</b>
      description1: !include joc/documentation/workflow/workflowId.md
      description2: " "
      description3: " "
      description4: !include joc/documentation/common/compact.md
      description5: " "
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: !include joc/schemas/workflow/workflowFilter-schema.json
      schema200: !include joc/schemas/workflow/workflow-schema.json
      example: TODO
      example200: TODO

/workflows:
  type:
    postJSON:
      description: Returns workflows - <b>IN PROGRESS</b>
      description1: !include joc/documentation/workflow/filteredByWorkflows.md
      description2: " "
      description3: !include joc/documentation/common/folders.md
      description4: !include joc/documentation/common/compact.md
      description5: !include joc/documentation/common/regex.md
      description6: " "
      description7: " "
      description8: " "
      description9: " "
      description10: " "
      description200: TODO
      schema: !include joc/schemas/workflow/workflowsFilter-schema.json
      schema200: !include joc/schemas/workflow/workflows-schema.json
      example: TODO
      example200: TODO
      
#TODO
#/yade:
#  description: This is not an API call. Use its children!!
#   
#  /overview/summary:
#    type:
#      postJSON:
#        description: |
#            Summary with number of<h5>
#            * successful transferred files
#            * failed transferred files
#  
#            filtered by <code>dateFrom</code> parameter until now
#            </h5>
#        description1: !include joc/documentation/common/dateFrom.md
#        description2: !include joc/documentation/common/dateTo.md
#        description3: !include joc/documentation/common/timeZone.md
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema200: !include joc/schemas/yade/summary-schema.json
#        schema: !include joc/schemas/yade/transferFilter-schema.json
#        example: |
#            {
#              "dateFrom": "1d"
#            }
#        example200: !include joc/examples/yade/summary-example.json
#  /overview/snapshot:
#      type:
#        postOnlyId:
#          description: |
#            Summary with number of<h5>
#            * running YADE transfers
#            * suspended YADE transfers
#            * YADE transfers with setback
#            * waiting for resource YADE transfers
#            </h5>
#          description200: " "
#          example: " "
#          schema200: !include joc/schemas/yade/snapshot-schema.json
#          example200: " "
#
#  /transfers:
#    type:
#      postJSON18:
#        description: Responds YADE transfers
#        description1: !include joc/documentation/yade/transferIds.md
#        description2: !include joc/documentation/common/compact.md
#        description3: !include joc/documentation/common/dateFrom.md
#        description4: !include joc/documentation/common/dateTo.md
#        description5: !include joc/documentation/common/timeZone.md
#        description6: !include joc/documentation/yade/operations.md
#        description7: !include joc/documentation/yade/states.md
#        description8: !include joc/documentation/yade/mandator.md
#        description9: !include joc/documentation/yade/source.md
#        description10: !include joc/documentation/yade/target.md
#        description11: !include joc/documentation/yade/hasIntervention.md
#        description12: !include joc/documentation/yade/isIntervention.md
#        description13: !include joc/documentation/yade/profile.md
#        description14: !include joc/documentation/yade/sourcePathRegex.md
#        description15: !include joc/documentation/yade/targetPathRegex.md
#        description16: !include joc/documentation/yade/sourcePath.md
#        description17: !include joc/documentation/yade/targetPath.md
#        description18: !include joc/documentation/common/limit.md
#        description200: !include joc/documentation/yade/transfers.md
#        schema: !include joc/schemas/yade/transferFilter-schema.json
#        schema200: !include joc/schemas/yade/transfers-schema.json
#        example: " "
#        example200: " "
#
#    /restart:
#      type:
#        postYADEJSONWithOkResponse:
#          description: Restarts YADE transfers for some failed files
#          audit: !include joc/documentation/audit/auditLog.md
#          schema: !include joc/schemas/yade/modifyTransfers-schema.json
#          example: " "
#  
#  /files:
#    type:
#      postJSON:
#        description: Responds transferred files
#        description1: !include joc/documentation/common/compact.md
#        description2: " "
#        description3: !include joc/documentation/yade/transferIds.md
#        description4: !include joc/documentation/yade/interventionTransferIds.md
#        description5: " "
#        description6: !include joc/documentation/yade/fileStates.md
#        description7: " "
#        description8: !include joc/documentation/yade/sourcePath.md
#        description9: !include joc/documentation/yade/targetPath.md
#        description10: !include joc/documentation/common/limit.md
#        description200: " "
#        schema: !include joc/schemas/yade/filesFilter-schema.json
#        schema200: !include joc/schemas/yade/files-schema.json
#        example: " "
#        example200: " "
#
#  /file:
#    type:
#      postJSON:
#        description: Responds transferred file
#        description1: !include joc/documentation/common/compact.md
#        description2: !include joc/documentation/yade/fileId.md
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema: !include joc/schemas/yade/fileFilter-schema.json
#        schema200: !include joc/schemas/yade/file200-schema.json
#        example: " "
#        example200: " "
#
#  /transfer/order:
#    type:
#      postJSON:
#        description: sends parametrisized order information for "resume order" dialog
#        description1: !include joc/documentation/yade/transferId.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: " "
#        description7: " "
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: " "
#        schema: !include joc/schemas/yade/modifyTransfer-schema.json
#        schema200: !include joc/schemas/order/order200_v-schema.json  
#        example: " "
#        example200: " "
#
#  /orders:
#    type:
#      postJSON:
#        description: Returns a collection of orders (volatile part) filtered by a period, job chains or order state
#        description1: !include joc/documentation/common/compact.md
#        description2: " "
#        description3: " "
#        description4: " "
#        description5: " "
#        description6: !include joc/documentation/order/filteredByOrders.md
#        description7: !include joc/documentation/yade/orderstate.md
#        description8: " "
#        description9: " "
#        description10: " "
#        description200: !include joc/documentation/order/orders_v.md
#        schema: !include joc/schemas/order/ordersFilter-schema.json
#        schema200: !include joc/schemas/order/orders_v-schema.json
#        example: !include joc/examples/order/filteredOrders-example.json
#        example200: !include joc/examples/order/orders_v-example.json

        