<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="js7_job_documentation_v1.1.xsl"?>
<description 
	xmlns="http://www.sos-berlin.com/schema/js7_job_documentation_v1.1" 
	xmlns:xhtml="http://www.w3.org/1999/xhtml" 
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.sos-berlin.com/schema/js7_job_documentation_v1.1 http://www.sos-berlin.com/schema/js7_job_documentation_v1.1.xsd">
	<job	name  = "SQLExecutorJob"
      		title = "Launch Database Statement">
		<script language="java" java_class="com.sos.jitl.jobs.db.SQLExecutorJob" resource="1"></script>
	</job>

	<configuration>
		<params id="job_parameter">

    		<xi:include href="./includes/common/params/param_hibernate_configuration_file.xml" parse="xml" />
      		
      		<param name="command" required="true" DataType="java.lang.String">
        		<note>
          			<p>
                        The argument holds SQL statements of the Job.
                    	It is possible to specify more than one SQL statement with the "command" argument.
                    	Such SQL statements are then carried out in the specified order
                    	and have to be separated by a semicolon and a subsequent new line.
                    </p>
                     <p>
                    	Placeholders are replaced in SQL statements by the job. This is achieved by embedding a variable in the form ${argument}
                    	in the SQL statement. On execution of the job the variable "argument" is assigned the value of the
                    	job argument with the same name.
                  	</p>
        		</note>
      		</param>
      		
      		<param name="resultset_as_warning" required="false" default_value="false" DataType="java.lang.Boolean">
        		<note>
          			<p>If set to true, a warning will be issued if the SQL statement(s) create a result set.</p>
        		</note>
      		</param>
      		
      		<param name="exec_returns_resultset" required="false" default_value="false" DataType="java.lang.Boolean">
        		<note>
          			<p>
            			If stored procedures are called that return a result set then
            			the argment has to be set to "true" in order to run stored procedure as queries.
          			</p>
        		</note>
      		</param>
      		
      		<param name="resultset_as_variables" required="false" default_value="" DataType="java.lang.String" valuelist="'column_value','name_value','csv'">
        		<note>
          		<div xmlns="http://www.w3.org/1999/xhtml">
            	<strong>Argument value: empty</strong><br/>
            	No result order variables are created.<br/><br/>
            	<strong>Argument value: column_value'</strong><br/>
            	If set to 'column_value', the first row of the result set will be used to create result order variables
            	(using column names as variable names). Example:<br/>
            	The query "SELECT first_name, last_name, age FROM persons" creates the following result set:<br/>
            	<table class="explanation">
              	<tr>
                  	<th>first_name</th>
                  	<th>last_name</th>
                  	<th>age</th>
              	</tr>
              	<tr>
                	<td>John</td>
                	<td>Doe</td>
                	<td>30</td>
              	</tr>
              	<tr>
                	<td>Hans</td>
                	<td>Mustermann</td>
                	<td>33</td>
              	</tr>
              	<tr>
                	<td>Jean</td>
                	<td>Dupont</td>
                	<td>56</td>
              	</tr>
            	</table>
            	The following name/value pairs will be created as result order variables:<br/>
            	<code>
               		first_name=John<br/>
               		last_name=Doe<br/>
               		age=30<br/>
            	</code>
            	<br/><br/>
            	<strong>Argument value: name_value</strong><br/>
            	If set to 'name_value', the first two columns of the result set will be turned into result order variables.
            	The values of the first column will become variable names, the values of the second column will become
            	variable values. Example:<br/>
            	From the above result set, the following name/value pairs will be created as result order variables:<br/>
            	<code>
               		John=Doe<br/>
               		Hans=Mustermann<br/>
               		Jean=Dupont<br/>
            	</code>
            	<br/><br/>
            	<strong>Argument value: csv</strong><br/>
            	If set to 'csv', the column names and all columns of the result set will be written to the file
                specified with the <paramref>output_file</paramref> argument enclosed with double quotes and separated by a comma.
            	<code>
               		"FIRST_NAME","LAST_NAME","AGE"<br/>
               		"John","Doe","30"<br/>
               		"Hans","Mustermann","33"<br/>
            	</code>
          		</div>
        		</note>
			</param>
			<param name="output_file" required="false" default_value="false" DataType="java.nio.file.Path">
        		<note>
          			<p>
            			The path to the output file that holds the result set in csv format.<br />
            			Required by the <paramref>resultset_as_variables</paramref> argument when used with the value <strong>csv</strong>.
          			</p>
        		</note>
      		</param>

            <xi:include href="./includes/common/params/params_credential_store.xml" parse="xml" />

		</params>
	</configuration>

	<documentation>
   		<div xmlns="http://www.w3.org/1999/xhtml">
            This job executes SQL statements in a database. This includes SQL stored procedures and SQL statements.
   		</div>
  	</documentation>
</description>
