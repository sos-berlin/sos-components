<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="js7_job_documentation_v1.1.xsl"?>
<description xmlns="http://www.sos-berlin.com/schema/js7_job_documentation_v1.1"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.sos-berlin.com/schema/js7_job_documentation_v1.1 http://www.sos-berlin.com/schema/js7_job_documentation_v1.1.xsd">

    <job name  = "PLSQLJob"
         title = "Execute PL/SQL Statements"
         category="PLSQL;SQL;Database;JITL;Oracle">
        <script language   = "java"
                java_class = "com.sos.jitl.jobs.db.oracle.PLSQLJob"
                resource   = "1"/>
    </job>

    <configuration>
     
        <params id="job_parameter">
    
            <param name="command" required="one of command or command_script_file">
                <note>
                	<title>SQL Statement(s) of the Job</title>
                	<p>
                        The argument holds SQL statement(s) of the Job.
                    	It is possible to specify more than one SQL statement with the "command" argument.
                    	Such SQL statements are then carried out in the specified order
                    	and have to be separated by a semicolon and a subsequent new line.
                     </p>
                     <p>
                    	Placeholders are replaced in SQL statements by the job. This is achieved by embedding a variable in the form ${argument}
                    	in the SQL statement. On execution of the job the variable "argument" is assigned the value of the
                    	argument with the same name.
                  	</p>
                </note>
            </param>
      
            <param name="command_script_file" required="one of command or command_script_file">
                <note>
                	<title>Path to a file that contains the SQL statement(s)</title>
                	<p>
                    	It is possible to specify SQL statements from one or more files.
                    	Such SQL statements are then carried out in the specified order of files.
                    	SQL statements included in files have to be separated by a semicolon and a subsequent new line.
                    </p>
                    <p>
                    	Placeholders are replaced in SQL statements by the job. This is achieved by embedding a variable in the form ${argument}
                    	in the SQL statement. On execution of the job the variable "argument" is assigned the value of the
                    	argument with the same name.
                  	</p>
                </note>
            </param>

            <param name="db_url" required="true">
                <note>
                    <title>The JDBC URL (e.g. jdbc:oracle:thin:@localhost:1521:XE)</title>
                    <p>
                        The JDBC URL specifies the host and port of the Orcle listener. Depending on the syntax in use the
                        Service Name or Service ID of the database is specified.
                    </p>
                    <p>
                        The JDBC URL can be retrieved from a credential store by use of the cs://path/entry@url property.
                    </p>
                </note>
            </param>
      
            <param name="db_user" required="true">
                <note>
                    <title>The user accocunt for access to the database</title>
                    <p>
                        Database user accounts can be retrieved from a credential store by use of the cs://path/entry@user property.
                    </p>
                </note>
            </param>
      
            <param name="db_password" required="false">
                <note>
                    <title>The password for access to the database</title>
                    <p>
                        Passwords for user accounts can be retrieved from a credential store by use of the cs://path/entry@password property.
                    </p>
                </note>
            </param>
      
            <xi:include href="./includes/com.sos.jitl.jobs.sql/param_variable_parser_reg_expr.xml" parse="xml"/>

            <param name="credential_store_file" required="false">
                <note>
                    <title>Location of the Credential Store Database File</title>
                    <p>
                        The path to the KeepPass database file that contains the credentials for access to the database.
                    </p>
                    <p>
                        Alternatively it is possible to specify the value in the URL with the <code>?file=</code> query parameter.
                    </p>
                </note>
            </param>
            
            <param name="credential_store_key_file" required="false">
                <note>
                    <title>Location of the Credential Store Key File</title>
                    <p>
                        The path to the KeePass key file that represents the key for access to the credential store.
                        This requires a key file to be assigned the KeePass database file. If no KeePass key file is specified, 
                        the the file name is assumed from the basename of the KeePass database file and the extension .key.
                    </p>
                    <p>
                        Alternatively it is possible to specify the value in the URL with <code>?keyfile=</code> query parameter.
                    </p>
                </note>
            </param>
            
            <param name="credential_store_entry_path" required="false">
                <note>
                    <title>Path to entries in the Credential Store</title>
                    <p>
                        The argument is used to specify a common path that is added to all entries.<br/>
                        Example: <br/>
                        credential_store_entry_path=/sos/jobscheduler<br/>
                        password=cs://mydb@password<br/>
                        In the KeePass database the entry is found in /sos/jobscheduler/mydb@password.
                    </p>
                    <p>
                        Alternatively it is possible to specify the value in the URL with the <code>?entry_path=</code> query parameter.
                    </p>
                </note>
            </param>
        
        </params>
        
        <params id="return_parameter">
            
            <param name="sql_error" required="false">
                <note>
                    <title>Error Messages of the JDBC client or the database server</title>
                    <p>
                        If errors occur during execution of SQL statements then the error messages will be stored with the "sql_error" result variable 
                        in the order or occurrence.
                        If no errors occur then the value of the variable is empty.
                    </p>
                </note>
            </param>
        
            <xi:include href="./includes/com.sos.jitl.jobs.sql/param_std_out_output.xml" parse="xml"/>
        
        </params>
    </configuration>

    <documentation>
    
        <note>
            <title>What is the purpose of this job?</title>
            <p>The job executes PL/SQL statements by JDBC.</p>
        </note>
    
    
        <note>
            <title>How is the job script defined?</title>
            <p>
                SQL statements can be stored to a separate file that is specified by the <paramref> command_script_file </paramref> argument.
                In addition, they can be specified with the value of the <paramref>command</paramref> argument.
            </p>
            <p>
                Before SQL statements are executed, they are checked for placeholders that should be substituted.
                Placeholders that reference order variables are replaced by the oder variable's value.
                The following syntax for use with SQL statements is supported: ${argument}
            </p>
        </note>
    
    
        <note>
            <title>How can results be reused in subsequent jobs?</title>
            <p>
                To report return values the job adds result order variables.
                The first set of return variables is static in the sense that variables are always provided, such as the
                variables explained with section "return variables".
                In addition, result order variables can be added dynamically.
                The job parses output of the process and extracts variable names and values using a regular expression.
                The regular expression is defined with the <paramref>variable_parser_reg_exp</paramref> argument.
            </p>
            <p>
                Result order variables are available to jobs and instructions in subsequent nodes of a workflow.
                The values of result orders variables can be modified by subsequent jobs and instructions.
            </p>
        </note>

        <p>
            <codeexample>
                <embeddedExample>declare
  howmany NUMBER;
  p_id varchar2(20) := null;
begin
  dbms_output.put_line('set variable1=value1');
  p_id := '12345';
  --
  -- If the job or order contains the argument
  --
  -- table_name=scheduler_variables
  --
  -- then all following select statement is substituted to 'select count(*) into howmany from scheduler_variables;'
  --
  select count(*) into howmany from ${table_name};
  --
  -- now add the results to the buffer
  -- JS7 will read the results from the buffer
  --
  dbms_output.put_line('The table ${table_name} has ' || howmany || ' rows.');
  dbms_output.put_line('set howmany is ' || howmany);
  dbms_output.put_line('set variable1 is ' || p_id);
  dbms_output.put_line('set variable2 is value2');
end;
            </embeddedExample>

                <explanation>
                    <title >Example: PL/SQL code</title>
                    <p>
                        If the job or order carries the argument "table_name" with the value "scheduler_variables"
                        then all following select statements are substituted to "select count(*) into howmany from scheduler_variables;"
                    </p>
                    <p>
                        The <paramref>variable_parser_reg_expr</paramref> argument specifies a regular expression to parse output of the process,
                        for example with the regular expression "^SET\s+([^\s]+)\s*IS\s+(.*)$".
                    </p>
                    <p>
                        In the above example the following resulting order variables are created:
                    </p>
                    <p>
                        <ul>
                            <li>howmany=8</li>
                            <li>variable1=12345</li>
                            <li>variable2=value2</li>
                        </ul>
                    </p>
                    <p>
                        If a resulting order variables is set a number of times then the last assignment.
                    </p>
                </explanation>
            </codeexample>
        </p>

    </documentation>

</description>
