<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="scheduler_job_documentation_v1.1.xsl"?>
<description xmlns="http://www.sos-berlin.com/schema/js7_job_documentation_v1.1"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.sos-berlin.com/schema/js7_job_documentation_v1.1 http://www.sos-berlin.com/schema/js7_job_documentation_v1.1.xsd">
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1 http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1.xsd">

    <job name="SOSSQLPlusJob" title="Start SQL*Plus client and execute a sql*plus script"  tasks="unbounded">
        <script language="java" java_class="com.sos.jitl.jobs.db.oracle.SOSSQLPLUSJob" resource="1">
        </script>
    </job>

    <releases>
        <release id="1.0" created="2021-04-26" modified="2021-04-26">
            <title>Version 1.0</title>
           
            <note language="en">
                <xhtml:div>Initial Release</xhtml:div>
            </note>
        </release>
    </releases>

    <resources>
         
    </resources>

    <configuration> 
        <params id="job_parameter">

             <param name="ignore_ora_messages" required="false" default_value="" DataType="SOSOptionStringValueList" Category="sql,pl/sql,sql*plus">
               
                <note language="en">
                    <title>Ignore "ORA-" errors</title>
                    <xhtml:div>
                        <p>
                        The value of this parameter are the numbers of the Oracle error messages that should not be interpreted as an error to specify.
                        Multipe error numbers must be separated by a colon (;).
                        The text "ORA-" may be omitted.
                        </p>
                    </xhtml:div>
                </note>
            </param>
            <param name="ignore_sp2_messages" required="false" default_value="">
                
                <note language="en">
                    <title>Ignore SQL*Plus Errors</title>
                    <xhtml:div>
                        <p>
                        The value of this parameter are the numbers of the SQL*Plus error messages that should not be interpreted as an error to specify.
                        Multipe error numbers must be separated by a colon (;).
                        The text "SP2-" may be omitted.
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <param name="shell_command" required="true" default_value="sqlplus">
                
                <note language="en">
                    <title>Name of the SQL*Plus Client executable</title>
                    <xhtml:div>
                        <p>
                        The value of this parameter specifies the name of the SQL*Plus client.
The SQL*Plus code is processed by the client.</p>
                    </xhtml:div>
                </note>
            </param>

            <xi:include href="./params/param_sqlplus_script_file.xml" parse="xml" />
            <xi:include href="./params/param_sqlplus_db_url.xml" parse="xml" />
            <xi:include href="./params/param_variable_parser_reg_expr.xml" parse="xml" />

            <param name="db_user" required="false">
               
                <note language="en">
                    <title>User-ID of the database user</title>
                    <xhtml:div>
                    <p>
                        database user
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <param name="db_password" required="false">
                
                <note language="en">
                    <title>Password of the database user</title>
                    <xhtml:div>
                        database password
                    </xhtml:div>
                </note>
            </param>

            <param name="command_Line_options" required="false" default_value="-S -L">
               
                <note language="en">
                    <title>SQL*Plus Client Options</title>
                    <xhtml:div>
                        <p>
                            The value of this parameter contains the options which are available for the SQL*PLUS client on the command-line.
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <param name="include_files" required="false" default_value="">
               
                <note language="en">
                    <title>Code Fragments to include</title>
                    <xhtml:div>
                        <p>
                            This parameter can be specified for code fragments, which are additional to execute the SQL*Plus code.
                            The SQL*Plus code is temporary extendes by these fragments.
                            You must specify the names of files, separated by a semicolon, which contain the code fragments.
                            The contents of the files will be temporaryl inserted at the beginning of the SQL*Plus codes.
                        </p>
                    </xhtml:div>
                </note>
            </param>
        </params>

        <params id="return_parameter">
            <param name="sql_error" required="false" default_value="">
                
                <note language="en">
                    <title>Error Messages of the client or the server</title>
                    <xhtml:div>
                        <p>
                            If during the execution of the code one (or more) errors occurs, the error-text will be stored on this variable in the order.
                            If no error occurs then the contents of the variable will remain empty.
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <xi:include href="./params/param_std_out_output.xml" parse="xml">
                <xi:fallback>./params/param_std_out_output.xml not found</xi:fallback>
            </xi:include>
            <xi:include href="./params/param_std_err_output.xml" parse="xml">
                <xi:fallback>./params/param_std_err_output.xml not found</xi:fallback>
            </xi:include>
            <xi:include href="./params/param_exit_code.xml" parse="xml">
                <xi:fallback>./params/param_exit_code.xml not found</xi:fallback>
            </xi:include>
        </params>
        <params id="other">
        </params>

    </configuration>

    <documentation>
            
    <note language="en">
        <title>What is the purpose of this job?</title>
        <p>
        The job executes a SQL*Plus script.
             The job runs the SQL*Plus client in a separate process.
             It keeps the job in control of the program flow.</p>
    </note>

    
    <note language="en">
        <title>How is the script defined?</title>
        <p>
        The script can be saved to a separate file.
             Or it can be specified as the value of the parameter <paramref> command_script_file </paramref>.
             </p>
             <p>
Before the SQL*Plus client is launched for execution of the script, the script is modified by the job.
First, for each parameter a "DEFINE" directive is generated.
These directives are written to a temporary file.
Thereafter, the specified code fragments (see <paramref> include_files </paramref>) as the next block in the
temporary file is copied.
Subsequently, all directly specified name of JobScheduler parameters are substituted by their current value.
The script is written as the last part to the temporary file.
</p>
<p>
With the temporary file as input the client is started.
</p>
    </note>

   
    <note language="en">
        <title>How is it possible to use parameter in scripts?</title>
<p>
     Parameters of the job, job or order parameters, can be used in the script in two ways.
     Firstly, all parameters of their name, apply with a preceding "&amp;" in the script.
     They are defined as SQL*Plus variables by the job.
     The job created for each parameter a "DEFINE" directive.
     </p>
     <p>
     Secondly, the name of the JobScheduler parameters are used directly in the script.
     These names are then replaced by the current value of the parameter.
     </p>    </note>

    
    <note language="en">
        <title>How do I access stdout and stderr?</title>
        <p>
        The contents of STDOUT and STDERR are as values of the corresponding order parameters of the job transferred to the order.
     Thus, every subsequent step in a job chain has access to this information.
</p>
    </note>

    
    <note language="en">
        <title>How can results be reused in subsequent jobs?</title>
        <p>
        The job transfers the appropriate parameters in the order.
     The first of these are static parameters, such as those in the template docu described in the section "return parameters".
     On the other hand, these are dynamic parameters.
     The job analyzing the output of the script, and extracted there from using a regular expression, both
     Names and the values of these parameters.
     The regular expression is defined by the parameter <paramref> variable_parser_reg_exp </paramref>.
        </p>
        <p>
        These parameters are readable by all jobs in all job steps.
     The value of the parameter can be changed by other jobs.
        </p>
    </note>

    
    <note language="en">
        <title>How are errors are detected and treated?</title>
        <p>
        The job can detect errors that are reported by the SQL * Plus client.
     These have a number that starts with the string "SP2".
     </p>
     <p>
     Moreover, the job can detect errors that the DB server reported during or after the execution of the script.
     These begin with the string "ORA" and then also contain a number.
     </p>
     <p>
     Occurs either SP2 or an ORA-error occurs, the job is terminated abnormally.
     A return code of 98 is set.
     </p>
     <p>
     Additionally, the error message is as value of the parameter <paramref> sql_error </paramref> stored in the order parameters.
     </p>
    </note>

   
    <note language="en">
        <title>Errors may be ignored?</title>
        <p>

It is possible to ignore errors.
  There are parameters <paramref> ignore_sp2_messages </paramref> and <paramref> ignore_ora_messages </paramref>.
There the numbers of ignored errors are specified as values.
    The error messages are contained in the STDOUT, even if they are ignored.        </p>
    </note>

<p>
<codeexample type="sql*plus">
<embeddedExample>
WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT FAILURE

column end_date new_value BCY_DATE
column period new_value PN_YEAR_PERIOD
column period_prev new_value PN_YEAR_PERIOD_PREV

select '0' as end_date from dual;
prompt SET end_date IS &amp;BCY_DATE;
/
select '0' as period from dual;
prompt SET period IS &amp;PN_YEAR_PERIOD;
/
select '0' as period_prev from dual;
prompt SET period_prev IS &amp;PN_YEAR_PERIOD_PREV;
/
prompt SET end_date IS 1;
exit;
</embeddedExample>

<explanation language="en">
<title >Example: SQL*Plus script</title>
            <p>
            The following parameters are returned to the order
              (see the parameter <paramref>variable_parser_reg_expr</paramref>).
              For this purpose, the output of the script is parsed with the regular expression "^SET\s+([^\s]+)\s*IS\s+(.*)$".
            </p>
            <p>
             In the above example the following parameters are returned:
            </p>
            <p>
            <ul>
                <li>end_date=1</li>
                <li>period=0</li>
                <li>period_prev=0</li>
            </ul>
            </p>
            <p>If a parameter is set several times then the last value is used as the order parameter.</p>
</explanation>
</codeexample>
</p>
    </documentation>
</description>
