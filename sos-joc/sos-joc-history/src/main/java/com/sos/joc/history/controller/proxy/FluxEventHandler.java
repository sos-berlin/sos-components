package com.sos.joc.history.controller.proxy;

import com.sos.joc.event.EventBus;
import com.sos.joc.event.bean.order.AddOrderEvent;
import com.sos.joc.event.bean.order.TerminateOrderEvent;

import js7.data.event.Event;
import js7.data.order.OrderEvent.OrderAdded;
import js7.data.order.OrderEvent.OrderOrderAdded;
import js7.data.order.OrderEvent.OrderTerminated;
import js7.data.order.OrderId;
import js7.proxy.javaapi.data.controller.JEventAndControllerState;

public class FluxEventHandler {

    public static void processEvent(JEventAndControllerState<Event> eventAndState, String controllerId) throws Exception {
        Event event = eventAndState.stampedEvent().value().event();
        if (event instanceof OrderAdded) {
            OrderId oid = (OrderId) eventAndState.stampedEvent().value().key();
            boolean isChildOrder = oid.string().contains("|");
            if (!isChildOrder) {
                OrderAdded oa = (OrderAdded) event;
                EventBus.getInstance().post(new AddOrderEvent(controllerId, oid.string(), oa.workflowId().path().string()));
            }
        } else if (event instanceof OrderOrderAdded) {
            OrderOrderAdded oa = (OrderOrderAdded) event;
            OrderId oid = oa.orderId();
            boolean isChildOrder = oid.string().contains("|");
            if (!isChildOrder) {
                EventBus.getInstance().post(new AddOrderEvent(controllerId, oid.string(), oa.workflowId().path().string()));
            }
        } else if (event instanceof OrderTerminated) { // cancelled or finished
            OrderId oid = (OrderId) eventAndState.stampedEvent().value().key();
            boolean isChildOrder = oid.string().contains("|");
            if (!isChildOrder) {
                String orderIdModifier = oid.string().substring(12, 13);
                if ("D".equals(orderIdModifier)) { // order generated by addOrder instruction
                    EventBus.getInstance().post(new TerminateOrderEvent(controllerId, oid.string()));
                }
            }
        }
    }

}
