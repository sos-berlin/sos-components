# Generate
generateConfig.workflows                        = true
generateConfig.agents                           = true
generateConfig.schedules                        = true
;generateConfig.locks                           = true
;generateConfig.cyclicOrders                    = true

# Parser
parserConfig.excludedDirectoryNames             = .sos-templates;.svn;.configuration
parserConfig.excludedDirectoryPaths             = sos/

# Workflow
workflowConfig.defaultTimeZone                  = Etc/UTC 

# Workflow Job
;jobConfig.notification.mail.defaultTo            = 
;jobConfig.notification.mail.defaultCc            = 
;jobConfig.notification.mail.defaultBcc           = 

;jobConfig.jitl.forcedLogLevel                    = DEBUG

;jobConfig.forcedGraceTimeout                    = 15 
;jobConfig.forcedParallelism                     = 1 
;jobConfig.forcedFailOnErrWritten                = true
jobConfig.forcedV1Compatible                    = true

# Agent
;agentConfig.forcedControllerId                  = js7 
;agentConfig.defaultControllerId                 = js7 
agentConfig.forcedPlatform                      = UNIX 
agentConfig.forcedAgent                         = {"agentName":"primaryAgent", "platform":"UNIX", "controllerId":"js7","url":"http://localhost:4445"} 

agentConfig.mappingsAgent1                         = {"agentId":"primaryAgent", "platform":"UNIX", "controllerId":"js7","url":"http://localhost:4445"} 
agentConfig.mappingsAgent2                         = {"agentId":"primaryAgent", "platform":"UNIX", "controllerId":"js7","url":"http://localhost:4445"} 
agentConfig.mappingsAgent3                         = {"agentId":"primaryAgent", "platform":"UNIX", "controllerId":"js7","url":"http://localhost:4445"} 
agentConfig.mappingsAgent4                         = {"agentId":"primaryAgent", "platform":"UNIX", "controllerId":"js7","url":"http://localhost:4445"} 
agentConfig.mappings                           = js1_agent1=mappingsAgent1;js1_agent2=mappingAgent2

# Mock
## mockConfig.jitl.mockLevel
# OFF 
# INFO      Log arguments and always end successfully
# ERROR     Log arguments and fail if argument check fails(e.g. a required argument is missing)
;mockConfig.jitl.mockLevel                      = OFF
;mockConfig.shell.unixScript                    = $HOME/MockScript.sh
;mockConfig.shell.windowsScript                 = echo JS7

# Schedule
;scheduleConfig.forcedWorkingDayCalendarName        = AnyDays
;scheduleConfig.forcedNonWorkingDayCalendarName     = AnyDays
scheduleConfig.defaultWorkingDayCalendarName        = AnyDays
;scheduleConfig.defaultNonWorkingDayCalendarName    = AnyDays   
scheduleConfig.defaultTimeZone                      = Etc/UTC 
scheduleConfig.planOrders                           = true
scheduleConfig.submitOrders                         = true
